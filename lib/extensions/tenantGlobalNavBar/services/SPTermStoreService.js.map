{"version":3,"sources":["extensions/tenantGlobalNavBar/services/SPTermStoreService.ts"],"names":[],"mappings":"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","file":"extensions/tenantGlobalNavBar/services/SPTermStoreService.js","sourcesContent":["import { IWebPartContext} from '@microsoft/sp-webpart-base';\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\nimport { SPHttpClient, SPHttpClientResponse, ISPHttpClientOptions } from '@microsoft/sp-http';\n\n/**\n * @interface\n * Interface for SPTermStoreService configuration\n */\nexport interface ISPTermStoreServiceConfiguration {\n  spHttpClient: SPHttpClient;\n  siteAbsoluteUrl: string;\n}\n\n\n/**\n * @interface\n * Generic Term Object (abstract interface)\n */\nexport interface ISPTermObject {\n  identity: string;\n  isAvailableForTagging: boolean;\n  name: string;\n  guid: string;\n  customSortOrder: string;\n  terms: ISPTermObject[];\n  localCustomProperties: any;\n}\n\n/**\n * @class\n * Service implementation to manage term stores in SharePoint\n * Basic implementation taken from: https://oliviercc.github.io/sp-client-custom-fields/\n */\nexport class SPTermStoreService {\n\n  private spHttpClient: SPHttpClient;\n  private siteAbsoluteUrl: string;\n  private formDigest: string;\n\n  /**\n   * @function\n   * Service constructor\n   */\n  constructor(config: ISPTermStoreServiceConfiguration){\n      this.spHttpClient = config.spHttpClient;\n      this.siteAbsoluteUrl = config.siteAbsoluteUrl;\n  }\n\n  /**\n   * @function\n   * Gets the collection of term stores in the current SharePoint env\n   */\n  public async getTermsFromTermSetAsync(termSetName: string, termSetLocal: Number): Promise<ISPTermObject[]> {\n    if (Environment.type === EnvironmentType.SharePoint ||\n        Environment.type === EnvironmentType.ClassicSharePoint) {\n\n      //First gets the FORM DIGEST VALUE\n      let contextInfoUrl: string = this.siteAbsoluteUrl + \"/_api/contextinfo\";\n      let httpPostOptions: ISPHttpClientOptions = {\n        headers: {\n          \"accept\": \"application/json\",\n          \"content-type\": \"application/json\"\n        }\n      };\n      let response: SPHttpClientResponse = await this.spHttpClient.post(contextInfoUrl, SPHttpClient.configurations.v1, httpPostOptions);\n      let jsonResponse: any = await response.json();\n      this.formDigest = jsonResponse.FormDigestValue;\n\n      //Build the Client Service Request\n      let clientServiceUrl = this.siteAbsoluteUrl + '/_vti_bin/client.svc/ProcessQuery';\n      let data = '<Request AddExpandoFieldTypeSuffix=\"true\" SchemaVersion=\"15.0.0.0\" LibraryVersion=\"16.0.0.0\" ApplicationName=\"JavaScript Client\" xmlns=\"http://schemas.microsoft.com/sharepoint/clientquery/2009\"><Actions><ObjectPath Id=\"2\" ObjectPathId=\"1\" /><ObjectIdentityQuery Id=\"3\" ObjectPathId=\"1\" /><ObjectPath Id=\"5\" ObjectPathId=\"4\" /><ObjectIdentityQuery Id=\"6\" ObjectPathId=\"4\" /><ObjectPath Id=\"8\" ObjectPathId=\"7\" /><Query Id=\"9\" ObjectPathId=\"7\"><Query SelectAllProperties=\"false\"><Properties /></Query><ChildItemQuery SelectAllProperties=\"false\"><Properties><Property Name=\"Terms\" SelectAll=\"true\"><Query SelectAllProperties=\"false\"><Properties /></Query></Property></Properties></ChildItemQuery></Query></Actions><ObjectPaths><StaticMethod Id=\"1\" Name=\"GetTaxonomySession\" TypeId=\"{981cbc68-9edc-4f8d-872f-71146fcbb84f}\" /><Method Id=\"4\" ParentId=\"1\" Name=\"GetDefaultSiteCollectionTermStore\" /><Method Id=\"7\" ParentId=\"4\" Name=\"GetTermSetsByName\"><Parameters><Parameter Type=\"String\">' + termSetName + '</Parameter><Parameter Type=\"Int32\">' + termSetLocal + '</Parameter></Parameters></Method></ObjectPaths></Request>';\n      httpPostOptions = {\n        headers: {\n          'accept': 'application/json',\n          'content-type': 'application/json',\n          \"X-RequestDigest\": this.formDigest\n        },\n        body: data\n      };\n\n      let serviceResponse: SPHttpClientResponse = await this.spHttpClient.post(clientServiceUrl, SPHttpClient.configurations.v1, httpPostOptions);\n      let serviceJSONResponse: Array<any> = await serviceResponse.json();\n\n      let result: Array<ISPTermObject> = new Array<ISPTermObject>();\n\n      // Extract the object of type SP.Taxonomy.TermSetCollection from the array\n      let termSetsCollections = serviceJSONResponse.filter(\n        (child: any) => (child != null && child['_ObjectType_'] !== undefined && child['_ObjectType_'] === \"SP.Taxonomy.TermSetCollection\")\n      );\n\n      // And if any, process the TermSet objects in it\n      if (termSetsCollections != null && termSetsCollections.length > 0) {\n        let termSetCollection = termSetsCollections[0];\n\n        let childTermSets = termSetCollection['_Child_Items_'];\n\n        // Extract the object of type SP.Taxonomy.TermSet from the array\n        let termSets = childTermSets.filter(\n          (child: any) => (child != null && child['_ObjectType_'] !== undefined && child['_ObjectType_'] === \"SP.Taxonomy.TermSet\")\n        );\n\n        // And if any, process the requested TermSet object\n        if (termSets != null && termSets.length > 0) {\n          let termSet = termSets[0];\n\n          let termsCollection = termSet['Terms'];\n          let childItems = termsCollection['_Child_Items_'];\n\n          return(await Promise.all<ISPTermObject>(childItems.map(async (t: any) : Promise<ISPTermObject> => {\n            return await this.projectTermAsync(t);\n          })));\n        }\n      }\n    }\n\n    // Default empty array in case of any missing data\n    return (new Promise<Array<ISPTermObject>>((resolve, reject) => {\n      resolve(new Array<ISPTermObject>());\n    }));\n  }\n\n\n  /**\n   * @function\n   * Gets the child terms of another term of the Term Store in the current SharePoint env\n   */\n  private async getChildTermsAsync(term: any): Promise<ISPTermObject[]> {\n\n    // Check if there are child terms to search for\n    if (Number(term['TermsCount']) > 0) {\n\n      //Build the Client Service Request\n      let clientServiceUrl = this.siteAbsoluteUrl + '/_vti_bin/client.svc/ProcessQuery';\n      let data = '<Request AddExpandoFieldTypeSuffix=\"true\" SchemaVersion=\"15.0.0.0\" LibraryVersion=\"16.0.0.0\" ApplicationName=\".NET Library\" xmlns=\"http://schemas.microsoft.com/sharepoint/clientquery/2009\"><Actions><ObjectPath Id=\"20\" ObjectPathId=\"19\" /><Query Id=\"21\" ObjectPathId=\"19\"><Query SelectAllProperties=\"false\"><Properties /></Query><ChildItemQuery SelectAllProperties=\"true\"><Properties><Property Name=\"CustomSortOrder\" ScalarProperty=\"true\" /><Property Name=\"LocalCustomProperties\" ScalarProperty=\"true\" /></Properties></ChildItemQuery></Query></Actions><ObjectPaths><Property Id=\"19\" ParentId=\"16\" Name=\"Terms\" /><Identity Id=\"16\" Name=\"' + term['_ObjectIdentity_'] + '\" /></ObjectPaths></Request>';\n      let httpPostOptions: ISPHttpClientOptions = {\n        headers: {\n          'accept': 'application/json',\n          'content-type': 'application/json',\n          \"X-RequestDigest\": this.formDigest\n        },\n        body: data\n      };\n      let serviceResponse: SPHttpClientResponse = await this.spHttpClient.post(clientServiceUrl, SPHttpClient.configurations.v1, httpPostOptions);\n      let serviceJSONResponse: Array<any> = await serviceResponse.json();\n\n      // Extract the object of type SP.Taxonomy.TermCollection from the array\n      let termsCollections = serviceJSONResponse.filter(\n        (child: any) => (child != null && child['_ObjectType_'] !== undefined && child['_ObjectType_'] === \"SP.Taxonomy.TermCollection\")\n      );\n\n      // And if any, get the first and unique Terms collection object\n      if (termsCollections != null && termsCollections.length > 0) {\n        let termsCollection = termsCollections[0];\n\n        let childItems = termsCollection['_Child_Items_'];\n\n        return(await Promise.all<ISPTermObject>(childItems.map(async (t: any) : Promise<ISPTermObject> => {\n          return await this.projectTermAsync(t);\n        })));\n      }\n    }\n\n    // Default empty array in case of any missing data\n    return (new Promise<Array<ISPTermObject>>((resolve, reject) => {\n      resolve(new Array<ISPTermObject>());\n    }));\n  }\n\n  /**\n   * @function\n   * Projects a Term object into an object of type ISPTermObject, including child terms\n   * @param guid\n   */\n  private async projectTermAsync(term: any) : Promise<ISPTermObject> {\n\n    return({\n      identity: term['_ObjectIdentity_'] !== undefined ? term['_ObjectIdentity_'] : \"\",\n      isAvailableForTagging: term['IsAvailableForTagging'] !== undefined ? term['IsAvailableForTagging'] : false,\n      guid: term['Id'] !== undefined ? this.cleanGuid(term['Id']) : \"\",\n      name: term['Name'] !== undefined ? term['Name'] : \"\",\n      customSortOrder: term['CustomSortOrder'] !== undefined ? term['CustomSortOrder'] : \"\",\n      terms: await this.getChildTermsAsync(term),\n      localCustomProperties: term['LocalCustomProperties'] !== undefined ? term['LocalCustomProperties'] : null,\n    });\n  }\n\n  /**\n   * @function\n   * Clean the Guid from the Web Service response\n   * @param guid\n   */\n  private cleanGuid(guid: string): string {\n    if (guid !== undefined)\n      return guid.replace('/Guid(', '').replace('/', '').replace(')', '');\n    else\n      return '';\n  }\n}\n"],"sourceRoot":"..\\..\\..\\..\\src"}