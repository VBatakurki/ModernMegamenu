{"version":3,"sources":["extensions/tenantGlobalNavBar/TenantGlobalNavBarApplicationCustomizer.ts"],"names":[],"mappings":"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","file":"extensions/tenantGlobalNavBar/TenantGlobalNavBarApplicationCustomizer.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDom from 'react-dom';\n\nimport { override } from '@microsoft/decorators';\nimport { Log } from '@microsoft/sp-core-library';\nimport {\n  BaseApplicationCustomizer,\n  PlaceholderContent,\n  PlaceholderName\n} from '@microsoft/sp-application-base';\n\nimport { escape } from '@microsoft/sp-lodash-subset';\n\nimport TenantGlobalNavBar from './components/TenantGlobalNavBar';\nimport { ITenantGlobalNavBarProps } from './components/ITenantGlobalNavBarProps';\nimport TenantGlobalFooterBar from './components/TenantGlobalFooterBar';\nimport { ITenantGlobalFooterBarProps } from './components/ITenantGlobalFooterBarProps';\nimport * as SPTermStore from './services/SPTermStoreService';\nimport pnp from \"sp-pnp-js\";\n\nimport styles from './AppCustomizer.module.scss';\nimport * as strings from 'TenantGlobalNavBarApplicationCustomizerStrings';\n\nconst LOG_SOURCE: string = 'TenantGlobalNavBarApplicationCustomizer';\nconst NAV_TERMS_KEY: string = 'global-navigation-terms';\n\n/**\n * If your command set uses the ClientSideComponentProperties JSON input,\n * it will be deserialized into the BaseExtension.properties object.\n * You can define an interface to describe it.\n */\nexport interface ITenantGlobalNavBarApplicationCustomizerProperties {\n  TopMenuTermSet?: string;\n  BottomMenuTermSet?: string;\n}\n\n/** A Custom Action which can be run during execution of a Client Side Application */\nexport default class TenantGlobalNavBarApplicationCustomizer\n  extends BaseApplicationCustomizer<ITenantGlobalNavBarApplicationCustomizerProperties> {\n\n  private _topPlaceholder: PlaceholderContent | undefined;\n  private _bottomPlaceholder: PlaceholderContent | undefined;\n  private _topMenuItems: SPTermStore.ISPTermObject[];\n  private _bottomMenuItems: SPTermStore.ISPTermObject[];\n\n  @override\n  public async onInit(): Promise<void> {\n    Log.info(LOG_SOURCE, `Initialized ${strings.Title}`);\n\n    // Added to handle possible changes on the existence of placeholders\n    // this.context.placeholderProvider.changedEvent.add(this, this._renderPlaceHolders);\n\n    // Configure caching\n    pnp.setup({\n      defaultCachingStore: \"session\",\n      defaultCachingTimeoutSeconds: 900, //15min\n      globalCacheDisable: false // true to disable caching in case of debugging/testing\n    });\n\n    // Retrieve the menu items from taxonomy\n    let termStoreService: SPTermStore.SPTermStoreService = new SPTermStore.SPTermStoreService({\n      spHttpClient: this.context.spHttpClient,\n      siteAbsoluteUrl: this.context.pageContext.web.absoluteUrl,\n    });\n\n    if (this.properties.TopMenuTermSet != null) {\n      let cachedTerms = pnp.storage.session.get(NAV_TERMS_KEY);\n      if(cachedTerms != null){\n        this._topMenuItems = cachedTerms;\n      }\n      else {\n        this._topMenuItems = await termStoreService.getTermsFromTermSetAsync(this.properties.TopMenuTermSet, this.context.pageContext.web.language);\n        pnp.storage.session.put(NAV_TERMS_KEY,this._topMenuItems);\n      }\n    }\n    if (this.properties.BottomMenuTermSet != null) {\n      this._bottomMenuItems = await termStoreService.getTermsFromTermSetAsync(this.properties.BottomMenuTermSet, this.context.pageContext.web.language);\n    }\n\n    // Call render method for generating the needed html elements\n    this._renderPlaceHolders();\n\n    return Promise.resolve<void>();\n  }\n\n  private _renderPlaceHolders(): void {\n\n    console.log('Available placeholders: ',\n      this.context.placeholderProvider.placeholderNames.map(name => PlaceholderName[name]).join(', '));\n\n    // Handling the top placeholder\n    if (!this._topPlaceholder) {\n      this._topPlaceholder =\n        this.context.placeholderProvider.tryCreateContent(\n          PlaceholderName.Top,\n          { onDispose: this._onDispose });\n\n      // The extension should not assume that the expected placeholder is available.\n      if (!this._topPlaceholder) {\n        console.error('The expected placeholder (Top) was not found.');\n        return;\n      }\n\n      if (this._topMenuItems != null && this._topMenuItems.length > 0) {\n        const element: React.ReactElement<ITenantGlobalNavBarProps> = React.createElement(\n          TenantGlobalNavBar,\n          {\n            menuItems: this._topMenuItems,\n          }\n        );\n\n        ReactDom.render(element, this._topPlaceholder.domElement);\n      }\n    }\n\n    // Handling the bottom placeholder\n    if (!this._bottomPlaceholder) {\n      this._bottomPlaceholder =\n        this.context.placeholderProvider.tryCreateContent(\n          PlaceholderName.Bottom,\n          { onDispose: this._onDispose });\n\n      // The extension should not assume that the expected placeholder is available.\n      if (!this._bottomPlaceholder) {\n        console.error('The expected placeholder (Bottom) was not found.');\n        return;\n      }\n\n      if (this._bottomMenuItems != null && this._bottomMenuItems.length > 0) {\n        const element: React.ReactElement<ITenantGlobalNavBarProps> = React.createElement(\n          TenantGlobalFooterBar,\n          {\n            menuItems: this._bottomMenuItems,\n          }\n        );\n\n        ReactDom.render(element, this._bottomPlaceholder.domElement);\n      }\n    }\n  }\n\n  private _onDispose(): void {\n    console.log('[TenantGlobalNavBarApplicationCustomizer._onDispose] Disposed custom top and bottom placeholders.');\n  }\n}\n"],"sourceRoot":"..\\..\\..\\src"}